knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(tidyverse)
install.packages("tidyverse")
# Load necessary libraries
library(tidyverse)
install.packages("ggplot2")
install.packages("corrplot")
# Load necessary libraries
library(tidyverse)
install.packages("rlang")
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(tidyverse)
# Load necessary libraries
library(tidyverse)
install.packages("rlang")
knitr::opts_chunk$set(echo = TRUE)
install.packages("rlang")
knitr::opts_chunk$set(echo = TRUE)
install.packages("rlang")
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(tidyverse)
library(rlang)
knitr::opts_chunk$set(echo = TRUE)
# Update all packages
update.packages(ask = FALSE)
# Update all packages
update.packages(ask = FALSE)
# Specifically update rlang
install.packages("rlang")
# Load necessary libraries
library(tidyverse)
# Load necessary libraries
library(tidyverse)
# Load necessary libraries
library(tidyverse)
# Update all packages
update.packages(ask = FALSE)
# Specifically update rlang
install.packages("rlang", dependencies = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
detach("package:rlang", unload=TRUE)
# detach("package:rlang", unload=TRUE)
install.packages("rlang", dependencies = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# detach("package:rlang", unload=TRUE)
install.packages("rlang", dependencies = TRUE)
install.packages("tidyverse")
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
# Load necessary libraries
library(tidyverse)
library(ggplot2)
library(corrplot)
# Load necessary libraries
library(tidyverse)
library(ggplot2)
library(corrplot)
# Load the dataset
train <- read.csv("/train.csv")
# Load the dataset
train <- read.csv("train.csv")
test <- read.csv("test.csv")
# Check the structure of the dataset
str(train)
summary(train)
# Load necessary libraries
library(tidyverse)
library(ggplot2)
library(corrplot)
# Load the dataset
train <- read.csv("train.csv")
test <- read.csv("test.csv")
# Check the structure of the dataset
str(train)
summary(train)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Descriptive statistics for numerical variables
numeric_vars <- train %>% select_if(is.numeric)
# Load necessary libraries
library(tidyverse)
library(ggplot2)
library(corrplot)
# Load the dataset
train <- read.csv("train.csv")
test <- read.csv("test.csv")
# Check the structure of the dataset
str(train)
summary(train)
# Descriptive statistics for numerical variables
numeric_vars <- train %>% select_if(is.numeric)
# detach("package:rlang", unload=TRUE)
install.packages("rlang", dependencies = TRUE)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
# detach("package:rlang", unload=TRUE)
install.packages("rlang", dependencies = TRUE)
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
# detach("package:rlang", unload=TRUE)
install.packages("rlang", dependencies = TRUE)
install.packages("dplyr")
# Load necessary libraries
library(tidyverse)
library(ggplot2)
library(corrplot)
library(dplyr)
# Load the dataset
train <- read.csv("train.csv")
test <- read.csv("test.csv")
# Check the structure of the dataset
str(train)
summary(train)
# Descriptive statistics for numerical variables
numeric_vars <- train %>% select_if(is.numeric)
summary(numeric_vars)
# Load necessary libraries
library(tidyverse)
library(ggplot2)
library(corrplot)
library(dplyr)
# Load the dataset
train <- read.csv("train.csv")
test <- read.csv("test.csv")
# Check the structure of the dataset
str(train)
summary(train)
# Check the structure of the dataset
str(train)
# Check the structure of the dataset
str(train)
# Summary statistics of the dataset
summary(train)
# Load necessary libraries
library(tidyverse)
library(ggplot2)
library(corrplot)
library(dplyr)
# Load the dataset
train <- read.csv("train.csv")
test <- read.csv("test.csv")
# Check the structure of the dataset
str(train)
# Summary statistics of the dataset
summary(train)
# Histogram of SalePrice
ggplot(train, aes(x = SalePrice)) +
geom_histogram(binwidth = 10000, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribution of SalePrice", x = "SalePrice", y = "Count")
# Boxplots for categorical variables
# MSZoning vs SalePrice
ggplot(train, aes(x = MSZoning, y = SalePrice)) +
geom_boxplot(fill = "blue", alpha = 0.7) +
labs(title = "SalePrice by MSZoning", x = "MSZoning", y = "SalePrice")
# Neighborhood vs SalePrice
ggplot(train, aes(x = reorder(Neighborhood, SalePrice, FUN = median), y = SalePrice)) +
geom_boxplot(fill = "blue", alpha = 0.7) +
labs(title = "SalePrice by Neighborhood", x = "Neighborhood", y = "SalePrice") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Scatter plots for numerical variables
# GrLivArea vs SalePrice
ggplot(train, aes(x = GrLivArea, y = SalePrice)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "SalePrice vs GrLivArea", x = "GrLivArea", y = "SalePrice")
TotalBsmtSF vs SalePrice
# TotalBsmtSF vs SalePrice
ggplot(train, aes(x = TotalBsmtSF, y = SalePrice)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "SalePrice vs TotalBsmtSF", x = "TotalBsmtSF", y = "SalePrice")
# Select numerical variables
numeric_vars <- train %>% select_if(is.numeric)
# Calculate the correlation matrix
cor_matrix <- cor(numeric_vars, use = "complete.obs")
# Visualize the correlation matrix using a heatmap
library(corrplot)
# Plotting the heatmap
corrplot(cor_matrix, method = "color", tl.cex = 0.6, number.cex = 0.7, addCoef.col = "black", tl.col = "black", order = "AOE")
# Select relevant features based on correlation analysis
selected_features <- c("OverallQual", "GrLivArea", "GarageCars", "TotalBsmtSF", "FullBath", "YearBuilt", "YearRemodAdd")
# Prepare the dataset for modeling
model_data <- train %>% select(SalePrice, all_of(selected_features))
# Load necessary libraries
library(tidyverse)
library(ggplot2)
library(corrplot)
library(dplyr)
library(caret)
install.packages("caret")
install.packages("caret")
# Install Packages
# detach("package:rlang", unload=TRUE)
# install.packages("rlang", dependencies = TRUE)
# install.packages("dplyr")
install.packages("caret")
install.packages("caret", dependencies = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Install Packages
# detach("package:rlang", unload=TRUE)
# install.packages("rlang", dependencies = TRUE)
# install.packages("dplyr")
install.packages("caret", dependencies = TRUE)
# Load necessary libraries
library(tidyverse)
library(ggplot2)
library(corrplot)
library(dplyr)
library(caret)
# Handle missing values
# For simplicity, we'll replace NA values with the median for numerical variables
numeric_vars <- train %>% select_if(is.numeric)
for (col in colnames(numeric_vars)) {
train[is.na(train[[col]]), col] <- median(train[[col]], na.rm = TRUE)
}
# Handle missing values
# For simplicity, we'll replace NA values with the median for numerical variables
numeric_vars <- train %>% select_if(is.numeric)
for (col in colnames(numeric_vars)) {
train[is.na(train[[col]]), col] <- median(train[[col]], na.rm = TRUE)
}
# Convert categorical variables to factors
categorical_vars <- train %>% select_if(is.character)
for (col in colnames(categorical_vars)) {
train[[col]] <- as.factor(train[[col]])
}
# Select relevant features based on correlation analysis
selected_features <- c("OverallQual", "GrLivArea", "GarageCars", "TotalBsmtSF", "FullBath", "YearBuilt", "YearRemodAdd")
# Prepare the dataset for modeling
model_data <- train %>% select(SalePrice, all_of(selected_features))
# Build the multiple regression model
model <- lm(SalePrice ~ ., data = model_data)
# Display the summary of the model
summary(model)
# Diagnostic plots
par(mfrow = c(2, 2))
plot(model)
# Check for multicollinearity
vif(model)
# Split the data into training and validation sets
set.seed(123)
train_index <- createDataPartition(model_data$SalePrice, p = 0.8, list = FALSE)
train_set <- model_data[train_index, ]
validation_set <- model_data[-train_index, ]
# Train the model on the training set
train_model <- lm(SalePrice ~ ., data = train_set)
# Predict on the validation set
predictions <- predict(train_model, newdata = validation_set)
# Calculate validation metrics
validation_results <- data.frame(Actual = validation_set$SalePrice, Predicted = predictions)
rmse <- sqrt(mean((validation_results$Actual - validation_results$Predicted)^2))
mae <- mean(abs(validation_results$Actual - validation_results$Predicted))
list(RMSE = rmse, MAE = mae)
summary(model)
### Calculate RMSE and MAE
predicted_values <- predict(model, model_data)
actual_values <- model_data$SalePrice
rmse <- sqrt(mean((predicted_values - actual_values)^2))
mae <- mean(abs(predicted_values - actual_values))
cat("RMSE:", rmse, "\n")
cat("MAE:", mae, "\n")
# Split the data into training and validation sets
set.seed(123)
train_index <- createDataPartition(model_data$SalePrice, p = 0.8, list = FALSE)
train_set <- model_data[train_index, ]
validation_set <- model_data[-train_index, ]
# Train the model on the training set
train_model <- lm(SalePrice ~ ., data = train_set)
# Predict on the validation set
predictions <- predict(train_model, newdata = validation_set)
# Calculate validation metrics
validation_results <- data.frame(Actual = validation_set$SalePrice, Predicted = predictions)
rmse <- sqrt(mean((validation_results$Actual - validation_results$Predicted)^2))
mae <- mean(abs(validation_results$Actual - validation_results$Predicted))
list(RMSE = rmse, MAE = mae)
# Check for multicollinearity
library(car)
vif_values <- vif(model)
vif_values
# Assess the performance of the regression model
# 1. Residual Analysis
# Plot residuals vs fitted values
plot(model$fitted.values, residuals(model),
xlab = "Fitted values", ylab = "Residuals",
main = "Residuals vs Fitted values")
abline(h = 0, col = "red")
# Normal Q-Q plot
qqnorm(residuals(model))
qqline(residuals(model), col = "red")
# 2. Homoscedasticity
# Scale-Location plot
plot(model, which = 3)
# 3. Multicollinearity
# Variance Inflation Factor (VIF)
vif_values <- vif(model)
print(vif_values)
# 4. Goodness of Fit
# R-squared and Adjusted R-squared
r_squared <- summary(model)$r.squared
adj_r_squared <- summary(model)$adj.r.squared
cat("R-squared: ", r_squared, "\n")
cat("Adjusted R-squared: ", adj_r_squared, "\n")
